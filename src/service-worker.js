/* eslint-disable no-restricted-globals */

import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { ExpirationPlugin } from 'workbox-expiration';

// Clean up old precaches automatically
cleanupOutdatedCaches();

// Precache all assets generated by the build process
precacheAndRoute(self.__WB_MANIFEST || []);

// Cache API calls with Network First strategy (try network, fallback to cache)
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 5,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

// Cache images with Cache First strategy and limit cache size & age
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'image-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache CSS and JS files with Stale While Revalidate (serve cache immediately, update in background)
registerRoute(
  ({ request }) =>
    request.destination === 'script' ||
    request.destination === 'style',
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);

// Background sync for failed POST requests (for example, comments or form submissions)
const bgSyncPlugin = new BackgroundSyncPlugin('post-queue', {
  maxRetentionTime: 24 * 60, // Retry for max of 24 Hours (in minutes)
});

registerRoute(
  ({ url, request }) =>
    request.method === 'POST' &&
    url.origin === self.location.origin,
  new NetworkFirst({
    cacheName: 'post-requests',
    plugins: [bgSyncPlugin],
  }),
  'POST'
);

// Offline fallback for navigation requests (serve index.html)
registerRoute(
  ({ request }) => request.mode === 'navigate',
  async ({ event }) => {
    try {
      return await fetch(event.request);
    } catch (error) {
      return caches.match('/index.html');
    }
  }
);
